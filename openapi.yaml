openapi: 3.0.1
info:
  title: Лабораторна робота № 5, варіант 8
  description: Написати сервіс для купівлі та бронювання квитків на концерти, події і т.д. Користувачі мають можливість купувати квиток, бронювати квиток, скасовувати бронь. Унеможливити купівлю чи бронювання одного і того ж квитка кількома користувачами.
  version: 1.0.0
externalDocs:
  description: GitHub repository
  url: https://github.com/YuriyPukhta/PP_lab
tags:
  - name: tickets
    description: operations with tickets
  - name: user
    description: operations with user
  - name: auth
    description: login/logout operations
paths:
  /tickets:
   
    get:
      tags:
      - tickets
      summary: Get all tickets
      description: getting of all tickets
      operationId: getticketss
      responses:
        200:
          description: "successful operation. all tickets are returned"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/tickets'
        401:
          $ref: '#/components/responses/UnauthorizedError' 
          
    post:
      tags:
      - tickets
      summary: Create new tickets
      description: creating a new tickets
      operationId: createtickets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tickets'
      responses:
        200:
          description: "successful operation. tickets is created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tickets'
        401:
          $ref: '#/components/responses/UnauthorizedError'     
      security:
      - basicAuth: []
      
  /tickets/{ticketsId}:
    put:
      tags:
      - tickets
      summary: Update tickets
      description: updating tickets owned by current user
      operationId: updatetickets
      parameters:
      - name: ticketsId
        in: path
        required: true
        description: 'the tickets id that needs to be updated'
        schema:
          type: integer
          format: int64
      requestBody:
        description: 'tickets object updated'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tickets'
        required: true
      responses:
        200:
          description:  "successful operation. Tickets is updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tickets'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: It is forbidden to delete not your tickets.
        404:
          description: tickets is not found.
      security:
      - basicAuth: []       
          
    delete:
      tags:
      - tickets
      summary: Delete tickets
      description: deleting existing tickets owned by current user
      operationId: deletetickets
      parameters:
      - name: ticketsId
        in: path
        required: true
        description: 'tickets id that needs to be updated'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description:  "successful operation. tickets is deleted"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: It is forbidden to delete not your tickets
        404:
          description: tickets was not found
      security:
      - basicAuth: []   
          

      
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs user in
      description: provides logging into system with given credentials
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: the user's password 
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '401':
          $ref: '#/components/responses/InvalidCredentialsError'
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logs  user out
      operationId: logoutUser
      responses:
        '200':
          description: successful operation
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basicAuth: []
  /user:
    post:
      tags:
        - user
      summary: Register new user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation. User is registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User with such username already exists
components:
  schemas:
    User:
      required:
        - id
        - username
        - password
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        username:
          type: string
        password:
          type: string
          format: password
    tickets:
      required:
        - id
        - namefilm
        - row
        - place
        - datatime
        - reservation 
      type: object
      properties:
        id:
          type: integer
          format: int64
        namefilm:
          type: string
        row:
          type: integer
          format: int64
        place:
          type: integer
          format: int64
        datatime:
          type: string
        reservation:
          type: string

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    InvalidCredentialsError:
      description: Provided credentials are invalid
